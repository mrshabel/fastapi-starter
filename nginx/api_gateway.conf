worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include mime.types;

    upstream fastapi_starter {
        server api:8000;
    }

    upstream flower {
        server worker-dashboard:5555;
    }

    upstream prometheus {
        server prometheus:9090;
    }

    upstream grafana {
        server grafana:3000;
    }


    server {
        # listen to https traffic
        # reference: https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-in-ubuntu-20-04-1
        listen 8443 ssl;
        listen [::]:8433 ssl;
        server_name localhost;

        # specify location of ssl keys
        ssl_certificate /etc/ssl/server.crt;
        ssl_certificate_key /etc/ssl/server.key;


        location /api/ {
            # trailing slash in proxy_pass to strip off "/api"
            proxy_pass http://fastapi_starter/;

            # define proxy headers to forward only important headers from client
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # forward client browser and session information. (variable name prefixed by http_)
            proxy_set_header User-Agent $http_user_agent;
            proxy_set_header Referrer $http_referrer;
            proxy_set_header Cookie $http_cookie;

            # forward authorization
            proxy_set_header Authorization $http_authorization;

        }

        # no trailing slash here since flower expects a "flower" suffix in the url path
        location /flower/ {
            proxy_pass http://flower;
        }

        location /prometheus/ {
            proxy_pass http://prometheus;

            proxy_set_header Host $http_host;
        }

        location /grafana/ {
            proxy_pass http://grafana/;

            proxy_set_header Host $http_host;
        }

    }

        server {
        listen 8080;
        listen [::]:8080;
        server_name localhost;

        # redirect client browser to https
        # port 8443 is added in development since that is the exposed https port. Please remove it when deploying

        # uncomment the line below in production and remove the line beneath it
        # return 301 https://$server_name$request_uri;
        rewrite ^/(.*)$ https://$server_name:8443/$1 redirect;
    }
}
